-- SQLBook: Markup
1. Посчитайте, сколько компаний закрылось.
-- SQLBook: Code
SELECT COUNT(name)
FROM company
WHERE status = 'closed'
-- SQLBook: Markup
2. Отобразите количество привлечённых средств для новостных компаний США. Используйте данные из таблицы company. Отсортируйте таблицу по убыванию значений в поле funding_total .
-- SQLBook: Code
SELECT funding_total
FROM company
WHERE category_code = 'news' AND country_code = 'USA'
ORDER BY funding_total DESC
-- SQLBook: Markup
3. Найдите общую сумму сделок по покупке одних компаний другими в долларах. Отберите сделки, которые осуществлялись только за наличные с 2011 по 2013 год включительно.
-- SQLBook: Code
SELECT SUM(price_amount)
FROM acquisition
WHERE term_code = 'cash'
      AND EXTRACT(YEAR FROM acquired_at) IN (2011, 2012, 2013)
-- SQLBook: Markup
4. Отобразите имя, фамилию и названия аккаунтов людей в поле network_username, у которых названия аккаунтов начинаются на 'Silver'=
-- SQLBook: Code
SELECT first_name,
       last_name,
       network_username
FROM people
WHERE network_username LIKE 'Silver%'
-- SQLBook: Markup
5. Выведите на экран всю информацию о людях, у которых названия аккаунтов в поле network_username содержат подстроку 'money', а фамилия начинается на 'K'.
-- SQLBook: Code
SELECT *
FROM people
WHERE network_username LIKE '%money%' AND last_name LIKE 'K%'
-- SQLBook: Markup
6. Для каждой страны отобразите общую сумму привлечённых инвестиций, которые получили компании, зарегистрированные в этой стране. Страну, в которой зарегистрирована компания, можно определить по коду страны. Отсортируйте данные по убыванию суммы.
-- SQLBook: Code
SELECT country_code,
       SUM(funding_total)
FROM company
GROUP BY country_code
ORDER BY SUM(funding_total) DESC;
-- SQLBook: Markup
7. Составьте таблицу, в которую войдёт дата проведения раунда, а также минимальное и максимальное значения суммы инвестиций, привлечённых в эту дату.
Оставьте в итоговой таблице только те записи, в которых минимальное значение суммы инвестиций не равно нулю и не равно максимальному значению.
-- SQLBook: Code
SELECT funded_at,
       MIN(raised_amount),
       MAX(raised_amount)
FROM funding_round
GROUP BY funded_at
HAVING MIN(raised_amount) != 0 AND MIN(raised_amount) != MAX(raised_amount)
-- SQLBook: Markup
8. Создайте поле с категориями:
Для фондов, которые инвестируют в 100 и более компаний, назначьте категорию high_activity.
Для фондов, которые инвестируют в 20 и более компаний до 100, назначьте категорию middle_activity.
Если количество инвестируемых компаний фонда не достигает 20, назначьте категорию low_activity.
Отобразите все поля таблицы fund и новое поле с категориями.
-- SQLBook: Code
SELECT *,
      CASE 
          WHEN invested_companies > 100 THEN 'high_activity'
          WHEN invested_companies < 100 AND invested_companies >= 20 THEN 'middle_activity'
          ELSE 'low_activity'
      END
FROM fund
-- SQLBook: Markup
9. Для каждой из категорий, назначенных в предыдущем задании, посчитайте округлённое до ближайшего целого числа среднее количество инвестиционных раундов, в которых фонд принимал участие. Выведите на экран категории и среднее число инвестиционных раундов. Отсортируйте таблицу по возрастанию среднего.
-- SQLBook: Code
SELECT ROUND(AVG(investment_rounds)),
       CASE
           WHEN invested_companies>=100 THEN 'high_activity'
           WHEN invested_companies>=20 THEN 'middle_activity'
           ELSE 'low_activity'
       END AS activity
FROM fund
GROUP BY activity
ORDER BY ROUND(AVG(investment_rounds))
-- SQLBook: Markup
10. Проанализируйте, в каких странах находятся фонды, которые чаще всего инвестируют в стартапы. 
Для каждой страны посчитайте минимальное, максимальное и среднее число компаний, в которые инвестировали фонды этой страны, основанные с 2010 по 2012 год включительно. Исключите страны с фондами, у которых минимальное число компаний, получивших инвестиции, равно нулю. Выгрузите десять самых активных стран-инвесторов.
Отсортируйте таблицу по среднему количеству компаний от большего к меньшему, а затем по коду страны в лексикографическом порядке.
-- SQLBook: Code
SELECT country_code,
       MIN(invested_companies),
       MAX(invested_companies),
       AVG(invested_companies)
FROM fund
WHERE EXTRACT(YEAR FROM CAST(founded_at AS date)) BETWEEN 2010 AND 2012
GROUP BY country_code
HAVING MIN(invested_companies) != 0
ORDER BY AVG(invested_companies) DESC, country_code
LIMIT 10
-- SQLBook: Markup
11. Отобразите имя и фамилию всех сотрудников стартапов. Добавьте поле с названием учебного заведения, которое окончил сотрудник, если эта информация известна.
-- SQLBook: Code
SELECT p.first_name,
       p.last_name,
       e.instituition
FROM people AS p
LEFT JOIN education AS e ON p.id = e.person_id
-- SQLBook: Markup
12. Для каждой компании найдите количество учебных заведений, которые окончили её сотрудники. Выведите название компании и число уникальных названий учебных заведений. Составьте топ-5 компаний по количеству университетов.
-- SQLBook: Code
SELECT c.name,
       COUNT(DISTINCT e.instituition) as ed
FROM company AS c LEFT JOIN people AS p ON c.id=p.company_id JOIN education AS e ON p.id=e.person_id
GROUP BY c.name
ORDER BY ed DESC
LIMIT 5
-- SQLBook: Markup
13. Составьте список с уникальными названиями закрытых компаний, для которых первый раунд финансирования оказался последним.
-- SQLBook: Code
SELECT DISTINCT c.name
FROM company AS c
INNER JOIN funding_round as fr ON c.id=fr.company_id
WHERE c.status = 'closed'
  AND fr.is_first_round = 1
  AND fr.is_last_round = 1;
-- SQLBook: Markup
14. Составьте список уникальных номеров сотрудников, которые работают в компаниях, отобранных в предыдущем задании.
-- SQLBook: Code
SELECT p.id
FROM company AS c
JOIN funding_round AS f ON c.id = f.company_id
JOIN people AS p ON c.id = p.company_id
WHERE status = 'closed' AND f.is_first_round = 1 AND f.is_last_round = 1
GROUP BY c.name, p.id
-- SQLBook: Markup
15. Составьте таблицу, куда войдут уникальные пары с номерами сотрудников из предыдущей задачи и учебным заведением, которое окончил сотрудник.
-- SQLBook: Code
SELECT DISTINCT p.id,
       e.instituition
FROM company AS c
JOIN funding_round AS f ON c.id = f.company_id
JOIN people AS p ON c.id = p.company_id
JOIN education AS e ON p.id = e.person_id
WHERE status = 'closed' AND f.is_first_round = 1 AND f.is_last_round = 1
GROUP BY c.name, p.id, e.instituition
-- SQLBook: Markup
16. Посчитайте количество учебных заведений для каждого сотрудника из предыдущего задания. При подсчёте учитывайте, что некоторые сотрудники могли окончить одно и то же заведение дважды.
-- SQLBook: Code
SELECT DISTINCT p.id,
       COUNT(e.instituition)
FROM people AS p
JOIN education AS e ON p.id = e.person_id
WHERE p.id IN (SELECT DISTINCT p.id
               FROM people AS p
               WHERE p.company_id IN (SELECT c.id
                                      FROM company AS c
                                      INNER JOIN funding_round as fr ON c.id=fr.company_id
                                      WHERE c.status = 'closed'
                                        AND fr.is_first_round = 1
                                        AND fr.is_last_round = 1))
GROUP BY p.id
-- SQLBook: Markup
17. Дополните предыдущий запрос и выведите среднее число учебных заведений (всех, не только уникальных), которые окончили сотрудники разных компаний. Нужно вывести только одну запись, группировка здесь не понадобится.
-- SQLBook: Code
SELECT AVG(inst)
FROM (SELECT DISTINCT p.id,
       COUNT(e.instituition) AS inst
       FROM people AS p
JOIN education AS e ON p.id = e.person_id
WHERE p.id IN (SELECT DISTINCT p.id
               FROM people AS p
               WHERE p.company_id IN (SELECT c.id
                                      FROM company AS c
                                      INNER JOIN funding_round as fr ON c.id=fr.company_id
                                      WHERE c.status = 'closed'
                                        AND fr.is_first_round = 1
                                        AND fr.is_last_round = 1))
GROUP BY p.id) AS quer
-- SQLBook: Markup
18. Напишите похожий запрос: выведите среднее число учебных заведений (всех, не только уникальных), которые окончили сотрудники Facebook*.
*(сервис, запрещённый на территории РФ)
-- SQLBook: Code
SELECT AVG(inst)
FROM (SELECT DISTINCT p.id,
       COUNT(e.instituition) AS inst
       FROM people AS p
JOIN education AS e ON p.id = e.person_id
WHERE p.id IN (SELECT DISTINCT p.id
               FROM people AS p
               WHERE p.company_id IN (SELECT c.id
                                      FROM company AS c
                                      WHERE c.name = 'Facebook'))
GROUP BY p.id) AS quer
-- SQLBook: Markup
19. Составьте таблицу из полей:
name_of_fund — название фонда;
name_of_company — название компании;
amount — сумма инвестиций, которую привлекла компания в раунде.
В таблицу войдут данные о компаниях, в истории которых было больше шести важных этапов, а раунды финансирования проходили с 2012 по 2013 год включительно.
-- SQLBook: Code
SELECT f.name AS name_of_fund,
       c.name AS name_of_company,
       fr.raised_amount AS amount
FROM investment AS i
JOIN company AS c ON i.company_id = c.id
JOIN fund AS f ON i.fund_id = f.id
JOIN funding_round AS fr ON i.funding_round_id = fr.id
WHERE c.milestones > 6 AND EXTRACT(YEAR FROM CAST(fr.funded_at AS timestamp)) BETWEEN 2012 AND 2013
-- SQLBook: Markup
20. Выгрузите таблицу, в которой будут такие поля:
название компании-покупателя;
сумма сделки;
название компании, которую купили;
сумма инвестиций, вложенных в купленную компанию;
доля, которая отображает, во сколько раз сумма покупки превысила сумму вложенных в компанию инвестиций, округлённая до ближайшего целого числа.
Не учитывайте те сделки, в которых сумма покупки равна нулю. Если сумма инвестиций в компанию равна нулю, исключите такую компанию из таблицы. 
Отсортируйте таблицу по сумме сделки от большей к меньшей, а затем по названию купленной компании в лексикографическом порядке. Ограничьте таблицу первыми десятью записями.
-- SQLBook: Code
SELECT c.name AS acquiring,
       a.price_amount AS acq_sum,
       cc.name AS acquired,
       cc.funding_total AS inv_sum,
       ROUND(a.price_amount / cc.funding_total) AS profit
FROM acquisition AS a
RIGHT JOIN company AS c ON a.acquiring_company_id = c.id
RIGHT JOIN company AS cc ON a.acquired_company_id = cc.id
WHERE a.price_amount != 0 AND cc.funding_total != 0
ORDER BY acq_sum DESC, acquired
LIMIT 10
-- SQLBook: Markup
21. Выгрузите таблицу, в которую войдут названия компаний из категории social, получившие финансирование с 2010 по 2013 год включительно. Проверьте, что сумма инвестиций не равна нулю. Выведите также номер месяца, в котором проходил раунд финансирования.
-- SQLBook: Code
SELECT c.name,
       EXTRACT(MONTH FROM fr.funded_at)
FROM funding_round AS fr
LEFT JOIN company AS c ON fr.company_id = c.id
WHERE fr.raised_amount > 0
      AND c.category_code = 'social'
      AND EXTRACT(YEAR FROM CAST(fr.funded_at AS timestamp)) BETWEEN 2010 AND 2013
-- SQLBook: Markup
22. Отберите данные по месяцам с 2010 по 2013 год, когда проходили инвестиционные раунды. Сгруппируйте данные по номеру месяца и получите таблицу, в которой будут поля:
номер месяца, в котором проходили раунды;
количество уникальных названий фондов из США, которые инвестировали в этом месяце;
количество компаний, купленных за этот месяц;
общая сумма сделок по покупкам в этом месяце.
-- SQLBook: Code
WITH
m1 AS (SELECT EXTRACT(MONTH FROM fd.funded_at) AS month,
      COUNT(DISTINCT f.name) AS name
      FROM funding_round AS fd
      JOIN investment AS i ON i.funding_round_id = fd.id
      JOIN fund AS f ON f.id = i.fund_id
      WHERE f.country_code = 'USA' AND EXTRACT(YEAR FROM funded_at) BETWEEN 2010 AND 2013
      GROUP BY month),
      
m2 AS (SELECT EXTRACT(MONTH from acquired_at) AS month,
      COUNT(acquired_company_id) AS companies,
      SUM(price_amount) AS sum_amount
      FROM acquisition
      WHERE EXTRACT(YEAR FROM acquired_at) BETWEEN 2010 AND 2013
      GROUP BY month)
      
SELECT m1.month,
       m1.name,
       m2.companies,
       m2.sum_amount
FROM m1 LEFT OUTER JOIN m2 ON m1.month = m2.month

-- SQLBook: Markup
23. Составьте сводную таблицу и выведите среднюю сумму инвестиций для стран, в которых есть стартапы, зарегистрированные в 2011, 2012 и 2013 годах. Данные за каждый год должны быть в отдельном поле. Отсортируйте таблицу по среднему значению инвестиций за 2011 год от большего к меньшему.
-- SQLBook: Code
WITH
y2011 AS (
    SELECT country_code, AVG(funding_total) AS year_2011
FROM company
WHERE EXTRACT(YEAR FROM founded_at) = 2011
GROUP BY country_code),

y2012 AS (
    SELECT country_code, AVG(funding_total) AS year_2012
FROM company
WHERE EXTRACT(YEAR FROM founded_at) = 2012
GROUP BY country_code),
           
y2013 AS (
    SELECT country_code, AVG(funding_total) AS year_2013
FROM company
WHERE EXTRACT(YEAR FROM founded_at) = 2013
GROUP BY country_code)

SELECT y2011.country_code,
       year_2011,
       year_2012,
       year_2013
FROM y2011 JOIN y2012 ON y2011.country_code = y2012.country_code JOIN y2013 ON y2012.country_code = y2013.country_code
ORDER BY year_2011 DESC
